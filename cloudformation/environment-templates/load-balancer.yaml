---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  VpcId:
    Type: String

  DnsRecordSetNamePrefix:
    Type: String

  LoadBalancerListenerCertificateArn:
    Type: String

Resources:
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-alb
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref SecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref LoadBalancerListenerCertificateArn
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 8080
      Protocol: HTTP

  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: wixit.xyz.
      Comment: Zone apex alias wixit.xyz targeted to LoadBalancer.
      RecordSets:
      - Name: !Sub ${DnsRecordSetNamePrefix}.wixit.xyz.
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt LoadBalancer.DNSName

Outputs:
  ServiceUrl:
    Description: URL of the load balancer for the sample service.
    Value: !Sub http://${LoadBalancer.DNSName}

  SecurityGroup:
    Value: !Ref SecurityGroup

  LoadBalancerListenerArn:
    Value: !Ref LoadBalancerListener
