Description: Create a CodePipeline to include Nested CloudFormation, CodeBuild and Approval steps.

Parameters:
  ArtifactStoreS3Location:
    Type: String
    Description: Name of the S3 bucket to store CodePipeline artificat.
  GitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
  GitHubToken:
    Type: String
    NoEcho: true
  GitHubUser:
    Type: String

Resources:
  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CodePipelineRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        -
          PolicyName: "CodePipelineNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:GetBucketPolicy"
                Resource:
                  - Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}
                  - Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}/*
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:CreateStack"
                  - "cloudformation:CreateUploadBucket"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:ValidateTemplate"
                Resource:
                  - Fn::Sub: arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/Test-${AWS::StackName}*
                  - Fn::Sub: arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/UAT-${AWS::StackName}*
                  - Fn::Sub: arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/Prod-${AWS::StackName}*
              -
                Effect: "Allow"
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/BuildCopyCFN-${AWS::StackName}
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/BuildCopyCFN-${AWS::StackName}:*
              -
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/CloudFormationRole-${AWS::StackName}

  CloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CloudFormationRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        -
          PolicyName: "CloudFormationNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "iam:AddRoleToInstanceProfile"
                  - "iam:AttachRolePolicy"
                  - "iam:CreateInstanceProfile"
                  - "iam:CreatePolicy"
                  - "iam:CreateRole"
                  - "iam:DeleteInstanceProfile"
                  - "iam:DeletePolicy"
                  - "iam:DeleteRole"
                  - "iam:DeleteRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:GetInstanceProfile"
                  - "iam:GetPolicy"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:ListInstanceProfiles"
                  - "iam:ListInstanceProfilesForRole"
                  - "iam:ListRolePolicies"
                  - "iam:ListRoles"
                  - "iam:PassRole"
                  - "iam:PutRolePolicy"
                  - "iam:RemoveRoleFromInstanceProfile"
                Resource:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/WebServerIAMRole-*
              -
                Effect: "Allow"
                Action:
                  - "ec2:Describe*"
                  - "ec2:CreateSecurityGroup"
                  - "ec2:CreateVpc"
                  - "ec2:DeleteVpc"
                  - "ec2:ModifyVpcAttribute"
                  - "ec2:CreateTags"
                  - "ec2:CreateInternetGateway"
                  - "ec2:DeleteInternetGateway"
                  - "ec2:CreateSubnet"
                  - "ec2:DeleteSubnet"
                  - "ec2:CreateRouteTable"
                  - "ec2:DeleteRouteTable"
                  - "ec2:AttachInternetGateway"
                  - "ec2:DetachInternetGateway"
                  - "ec2:CreateRoute"
                  - "ec2:DeleteRoute"
                  - "ec2:ModifySubnetAttribute"
                  - "ec2:AssociateRouteTable"
                  - "ec2:DisassociateRouteTable"
                  - "autoscaling:Describe*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:CreateLoadBalancer"
                  - "elasticloadbalancing:DeleteLoadBalancer"
                  - "autoscaling:CreateAutoScalingGroup"
                  - "autoscaling:CreateLaunchConfiguration"
                  - "rds:CreateDBSubnetGroup"
                  - "rds:DeleteDBSubnetGroup"
                  - "route53:ListHostedZones"
                  - "route53:ChangeResourceRecordSets"
                  - "route53:GetChange"
                Resource:
                  - "*"
              -
                Effect: "Allow"
                Action:
                  - "ec2:AttachNetworkInterface"
                  - "ec2:AttachVolume"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateTags"
                  - "ec2:CreateVolume"
                  - "ec2:DeleteSecurityGroup"
                  - "ec2:DeleteTags"
                  - "ec2:DeleteVolume"
                  - "ec2:DetachNetworkInterface"
                  - "ec2:DetachVolume"
                  - "ec2:MonitorInstances"
                  - "ec2:RebootInstances"
                  - "ec2:ReleaseAddress"
                  - "ec2:RunInstances"
                  - "ec2:StartInstances"
                  - "ec2:StopInstances"
                  - "ec2:TerminateInstances"
                  - "ec2:UnmonitorInstances"
                Resource:
                  - Fn::Sub: arn:aws:ec2:${AWS::Region}::image/*
                  - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                  - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:internet-gateway/*
                  - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/*
                  - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                  - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
                  - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*
                  - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
              -
                Effect: "Allow"
                Action:
                  - "iam:AddRoleToInstanceProfile"
                  - "iam:CreateInstanceProfile"
                  - "iam:DeleteInstanceProfile"
                  - "iam:GetInstanceProfile"
                  - "iam:ListInstanceProfiles"
                  - "iam:ListInstanceProfilesForRole"
                  - "iam:RemoveRoleFromInstanceProfile"
                Resource:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:instance-profile/Test-${AWS::StackName}-SecurityStack*
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:instance-profile/UAT-${AWS::StackName}-SecurityStack*
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:instance-profile/Prod-${AWS::StackName}-SecurityStack*
              -
                Effect: "Allow"
                Action:
                  - "rds:AddTagsToResource"
                  - "rds:CreateDBInstance"
                  - "rds:CreateDBSecurityGroup"
                  - "rds:DeleteDBInstance"
                  - "rds:DeleteDBSecurityGroup"
                  - "rds:DescribeDBInstances"
                  - "rds:DescribeDBParameterGroups"
                  - "rds:DescribeDBParameters"
                  - "rds:DescribeDBSecurityGroups"
                  - "rds:DescribeDBSubnetGroups"
                  - "rds:DescribeOptionGroups"
                  - "rds:ModifyDBInstance"
                  - "rds:RebootDBInstance"
                  - "rds:RemoveTagsFromResource"
                Resource:
                  - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:*
                  - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:og:*
                  - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:pg:*
                  - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:secgrp:*
                  - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:subgrp:*
              -
                Effect: "Allow"
                Action:
                  - "elasticloadbalancing:AddTags"
                  - "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer"
                  - "elasticloadbalancing:AttachLoadBalancerToSubnets"
                  - "elasticloadbalancing:ConfigureHealthCheck"
                  - "elasticloadbalancing:CreateListener"
                  - "elasticloadbalancing:CreateLoadBalancerListeners"
                  - "elasticloadbalancing:CreateLoadBalancerPolicy"
                  - "elasticloadbalancing:DeleteListener"
                  - "elasticloadbalancing:DeleteLoadBalancer"
                  - "elasticloadbalancing:DeleteLoadBalancerListeners"
                  - "elasticloadbalancing:DeleteLoadBalancerPolicy"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DetachLoadBalancerFromSubnets"
                  - "elasticloadbalancing:ModifyListener"
                  - "elasticloadbalancing:ModifyLoadBalancerAttributes"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RemoveTags"
                  - "elasticloadbalancing:SetSecurityGroups"
                  - "elasticloadbalancing:SetSubnets"
                  - "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
                  - "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer"
                  - "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer"
                Resource:
                  - Fn::Sub: arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/WebELB-*
              -
                Effect: "Allow"
                Action:
                  - "autoscaling:AttachInstances"
                  - "autoscaling:AttachLoadBalancers"
                  - "autoscaling:CreateOrUpdateTags"
                  - "autoscaling:DeleteAutoScalingGroup"
                  - "autoscaling:DeleteLaunchConfiguration"
                  - "autoscaling:DeleteTags"
                  - "autoscaling:SetDesiredCapacity"
                  - "autoscaling:SetInstanceHealth"
                  - "autoscaling:TerminateInstanceInAutoScalingGroup"
                  - "autoscaling:UpdateAutoScalingGroup"
                Resource:
                  - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/Test-${AWS::StackName}-ServerStack-*
                  - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/UAT-${AWS::StackName}-ServerStack-*
                  - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/Prod-${AWS::StackName}-ServerStack-*
                  - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:launchConfiguration:${AWS::AccountId}:*:Test-${AWS::StackName}-ServerStack-*
                  - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:launchConfiguration:${AWS::AccountId}:*:UAT-${AWS::StackName}-ServerStack-*
                  - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:launchConfiguration:${AWS::AccountId}:*:Prod-${AWS::StackName}-ServerStack-*
              -
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}
                  - Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}/*
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CodeBuildRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        -
          PolicyName: "CodeBuildNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:Get*"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                Resource:
                  - Fn::Sub: arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/Test-${AWS::StackName}*
              -
                Effect: "Allow"
                Action:
                  - "ec2:Describe*"
                  - "cloudformation:ValidateTemplate"
                  - "elasticloadbalancing:Describe*"
                  - "autoscaling:Describe*"
                  - "iam:Get*"
                  - "iam:List*"
                  - "logs:Describe*"
                  - "logs:Get*"
                  - "tag:Get*"
                Resource:
                  - "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource:
                  - Fn::Sub: arn:aws:s3:::codepipeline-${AWS::Region}-*
                  - Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}/*
                  - Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}
  BuildCopyCFNProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:
        Fn::Sub: BuildCopyCFN-${AWS::StackName}
      ServiceRole:
        Fn::GetAtt: [ CodeBuildRole, Arn ]
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:7.0.0
        EnvironmentVariables:
          - Name: TEMPLATE_BUCKET
            Value:
              Ref: ArtifactStoreS3Location
          - Name: TEMPLATE_PREFIX
            Value: codebuild
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.1
          environment_variables:
            plaintext:
              CHILD_TEMPLATES: |
                cloudformation/environment-templates/vpc.yaml
                cloudformation/environment-templates/load-balancer.yaml
                cloudformation/environment-templates/database.yaml
              TEMPLATE_FILES: |
                cloudformation/environment-base.yaml
                cloudformation/environment-templates/vpc.yaml
                cloudformation/environment-templates/load-balancer.yaml
                cloudformation/environment-templates/database.yaml
              CONFIG_FILES: |
                cloudformation/environment-base-params.json
          phases:
            install:
              commands:
                npm install jsonlint -g
            pre_build:
              commands:
                - ls -la
                - echo "Validating CFN templates"
                - |
                  for cfn_template in $TEMPLATE_FILES; do
                    echo "Validating CloudFormation template file $cfn_template"
                    aws cloudformation validate-template --template-body file://$cfn_template
                  done
                - |
                  for conf in $CONFIG_FILES; do
                    echo "Validating CFN parameters config file $conf"
                    jsonlint -q $conf
                  done
            build:
              commands:
                - echo "Copying child stack templates to S3"
                - |
                  for child_template in $CHILD_TEMPLATES; do
                    if [ "X$TEMPLATE_PREFIX" = "X" ]; then
                      aws s3 cp "$child_template" "s3://$TEMPLATE_BUCKET/$child_template"
                    else
                      aws s3 cp "$child_template" "s3://$TEMPLATE_BUCKET/$TEMPLATE_PREFIX/$child_template"
                    fi
                  done
                - echo "Updating template configurtion files to use the appropriate values"
                - |
                  for conf in $CONFIG_FILES; do
                    if [ "X$TEMPLATE_PREFIX" = "X" ]; then
                      echo "Replacing \"TEMPLATE_PATH_PLACEHOLDER\" for \"$TEMPLATE_BUCKET\" in $conf"
                      sed -i -e "s/TEMPLATE_PATH_PLACEHOLDER/$TEMPLATE_BUCKET/" $conf
                    else
                      echo "Replacing \"TEMPLATE_PATH_PLACEHOLDER\" for \"$TEMPLATE_BUCKET/$TEMPLATE_PREFIX\" in $conf"
                      sed -i -e "s/TEMPLATE_PATH_PLACEHOLDER/$TEMPLATE_BUCKET\/$TEMPLATE_PREFIX/" $conf
                    fi
                  done
                - |
                  if [ "X$TEMPLATE_PREFIX" = "X" ]; then
                    aws s3 cp "cloudformation/environment-base.yaml" "s3://$TEMPLATE_BUCKET/environment-base.yaml"
                    aws s3 cp "cloudformation/environment-base-params.json" "s3://$TEMPLATE_BUCKET/environment-base-params.json"
                  else
                    aws s3 cp "cloudformation/environment-base.yaml" "s3://$TEMPLATE_BUCKET/$TEMPLATE_PREFIX/environment-base.yaml"
                    aws s3 cp "cloudformation/environment-base-params.json" "s3://$TEMPLATE_BUCKET/$TEMPLATE_PREFIX/environment-base-params.json"
                  fi
          artifacts:
            files:
              - cloudformation/environment-base.yaml
              - cloudformation/environment-base-params.json

      TimeoutInMinutes: 15

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref ArtifactStoreS3Location

  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name:
        Fn::Sub: ContinuousDeliveryNestedCFN-${AWS::StackName}
      RoleArn:
          Fn::GetAtt: [ CodePipelineRole, Arn ]
      Stages:
        -
          Name: CFNSource
          Actions:
            -
              Name: CFNTemplateSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                -
                  Name: CFNTemplateOutput
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: CodeBuild
              InputArtifacts:
                - Name: CFNTemplateOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                -
                  Name: CFNTemplateArtifact
              Configuration:
                ProjectName:
                  Ref: BuildCopyCFNProject
              RunOrder: 1
        -
          Name: Production
          Actions:
            -
              Name: CreateProdChangeSet
              InputArtifacts:
                -
                  Name: CFNTemplateArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              OutputArtifacts:
                -
                  Name: CreatedProdChangeSet
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: ProdCBChangeSet
                RoleArn:
                  Fn::GetAtt: [ CloudFormationRole, Arn ]

                Capabilities: CAPABILITY_NAMED_IAM
                StackName:
                  Fn::Sub: Prod-${AWS::StackName}
                TemplateConfiguration: CFNTemplateArtifact::cloudformation/environment-base-params.json
                TemplatePath: CFNTemplateArtifact::cloudformation/environment-base.yaml
              RunOrder: 1
            -
              Name: DeployProduction
              InputArtifacts:
                -
                  Name: CreatedProdChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: ProdCBChangeSet
                StackName:
                  Fn::Sub: Prod-${AWS::StackName}
              RunOrder: 2

      ArtifactStore:
        Type: S3
        Location:
          Ref: ArtifactStoreS3Location